openapi: 3.0.0
info:
  title: Cart API
  version: 1.0.0
  description: REST API to manage products, carts and authentication

tags:
  - name: Products
    description: Product management endpoints
  - name: Carts
    description: Cart management endpoints
  - name: Auth
    description: Authentication endpoints

paths:
  /api/products:
    get:
      tags:
        - Products
      summary: Get all products
      description: Returns a paginated list of products
      responses:
        "200":
          description: A list of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  code:
                    type: integer
                    example: 200
                  payload:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  pageContext:
                    type: object
                    description: Pagination context
                    properties:
                      page:
                        type: integer
                      totalPages:
                        type: integer
                      totalDocs:
                        type: integer
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Internal server error

    post:
      tags:
        - Products
      summary: Create a new product
      description: Creates a new product from the request body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          $ref: "#/components/responses/ProductCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/products/{pid}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Returns a product by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the product
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ProductFound"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    put:
      tags:
        - Products
      summary: Update product by ID
      description: Updates a product by ID
      parameters:
        - name: pid
          in: path
          required: true
          description: The ID of the product
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          $ref: "#/components/responses/ProductUpdated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    delete:
      tags:
        - Products
      summary: Delete product by ID 
      description: Deletes a product by ID
      parameters:
        - name: pid
          in: path
          required: true
          description: The ID of the product
          schema:
            type: string
      responses:
        "200":
          $ref: "#/components/responses/ProductDeleted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /api/carts:
    post:
      tags:
        - Carts
      summary: Create a new empty cart
      description: Creates a new shopping cart with an empty product list.
      requestBody:
        required: false
      responses:
        "201":
          $ref: '#/components/responses/CartCreated'
        "400":
          $ref: '#/components/responses/BadRequest'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/carts/{cid}:
    get:
      tags:
        - Carts
      summary: Get cart by ID
      description: Returns a cart by ID
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the cart
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/CartFound'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Carts
      summary: Replace all products in a cart
      description: Replaces all products in a cart
      parameters:
        - name: cid
          in: path
          required: true
          description: The ID of the cart
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "200":
          $ref: '#/components/responses/CartUpdated'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Carts
      summary: Delete cart by ID
      description: Deletes a cart by ID
      parameters:
        - name: cid
          in: path
          required: true
          description: The ID of the cart
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/CartDeleted'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/carts/{cid}/product/{pid}:
    post:
      tags:
        - Carts
      summary: Add a product to a cart
      description: Adds a product to an existing cart. If the product is already in the cart, it may increase the quantity (según la lógica del servicio).
      parameters:
        - name: cid
          in: path
          required: true
          description: The ID of the cart
          schema:
            type: string
        - name: pid
          in: path
          required: true
          description: The ID of the product
          schema:
            type: string
      responses:
        "201":
          $ref: '#/components/responses/CartProductAdded'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - Carts
      summary: Update quantity of a product in a cart
      description: Updates the quantity of a specific product in a given cart.
      parameters:
        - name: cid
          in: path
          required: true
          description: The ID of the cart
          schema:
            type: string
        - name: pid
          in: path
          required: true
          description: The ID of the product
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  example: 3
      responses:
        "200":
          $ref: '#/components/responses/CartProductUpdated'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Carts
      summary: Remove a product from a cart
      description: Deletes a product from the specified cart.
      parameters:
        - name: cid
          in: path
          required: true
          description: The ID of the cart
          schema:
            type: string
        - name: pid
          in: path
          required: true
          description: The ID of the product
          schema:
            type: string
      responses:
        "200":
          $ref: '#/components/responses/CartProductDeleted'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /api/auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - password
              properties:
                firstName:
                  type: string
                  example: "Alice"
                lastName:
                  type: string
                  example: "Smith"
                email:
                  type: string
                  format: email
                  example: "alice@example.com"
                password:
                  type: string
                  format: password
                  example: "StrongPass123!"
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: User successfully created
                  payload:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "64e3f4..."
                      firstName:
                        type: string
                        example: Alice
                      lastName:
                        type: string
                        example: Smith
                      email:
                        type: string
                        example: alice@example.com
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Email already in use

  /api/auth/login:
    post:
      summary: Log in an existing user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "alice@example.com"
                password:
                  type: string
                  format: password
                  example: "StrongPass123!"
      responses:
        "200":
          description: User successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User successfully logged in
                  payload:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: "64e3f4..."
                          firstName:
                            type: string
                            example: Alice
                          lastName:
                            type: string
                            example: Smith
                          email:
                            type: string
                            example: alice@example.com
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Unauthorized

  /api/users/me:
    get:
      summary: Get user profile
      description: Returns the authenticated user's profile, excluding password and internal fields.
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  code:
                    type: integer
                    example: 200
                  payload:
                    $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Unauthorized
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: User not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # 📦 Base models (pure data)
    Product:
      type: object
      required:
        [title, description, code, price, status, stock, category, thumbnails]
      properties:
        title:
          type: string
        description:
          type: string
        code:
          type: string
        price:
          type: number
        status:
          type: string
          enum: [in_stock, out_of_stock]
          default: in_stock
        stock:
          type: integer
        category:
          type: string
          enum:
            [electronics, fashion, home, sports, beauty, games, books, music]
        thumbnails:
          type: array
          items:
            type: object
            properties:
              url:
                type: string

    CartProduct:
      type: object
      required: [product, quantity]
      properties:
        product:
          type: string
          description: Product ID (MongoDB ObjectId)
          example: "64e3cfc2b567b3c5fcd36b92"
        quantity:
          type: integer
          minimum: 1
          example: 2
          
    Cart:
      type: object
      required: [products]
      properties:
        products:
          type: array
          items:
            $ref: "#/components/schemas/CartProduct"

    # 📤 "Outputs" = useful responses for the client
    ProductOutput:
      allOf:
        - $ref: "#/components/schemas/Product"
        - type: object
          properties:
            _id:
              type: string
              example: "64e3cfc2b567b3c5fcd36b92"

    CartOutput:
      allOf:
        - $ref: "#/components/schemas/Cart"
        - type: object
          properties:
            _id:
              type: string
              example: "64e3cfc2b567b3c5fcd36b92"

    # 📡 Structured responses (standardized)
    BaseResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Operation successful

    DeleteResponse:
      $ref: '#/components/schemas/BaseResponse'

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        code:
          type: integer
          example: 400
        message:
          type: string
          example: Something went wrong

    ProductResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            payload:
              $ref: '#/components/schemas/ProductOutput'

    CartResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            payload:
              $ref: '#/components/schemas/CartOutput'

    # TODO: update User schema depending on provider
    User:
      type: object
      required:
        - _id
        - firstName
        - lastName
        - email
        - role
        - googleId
      properties:
        _id:
          type: string
          example: "60d0fe4f5311236168a109ca"
        firstName:
          type: string
          example: "Jane"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          example: "jane.doe@example.com"
        phoneNumber:

        age:
          type: integer
          example: 30
        cart:
          type: string
          nullable: true
          example: "60d0fe4f5311236168a109cb"
        role:
          type: string
          enum: [admin, user]
          default: user
          example: user
        googleId:
          type: string
          example: "1234567890"
          nullable: true

  responses:
    # - Error responses
    BadRequest:
      description: Bad request – invalid or missing data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            badRequest:
              summary: Bad Request example
              value:
                status: error
                code: 400
                message: Invalid or missing data

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            notFound:
              summary: Not Found example
              value:
                status: error
                code: 404
                message: Resource not found


    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            internalError:
              summary: Internal Server Error example
              value:
                status: error
                code: 500
                message: Internal server error

    # - Product responses
    ProductCreated:
      description: Product successfully created
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductResponse"

    ProductFound:
      description: Product found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductResponse"

    ProductUpdated:
      description: Product successfully updated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductResponse"

    ProductDeleted:
      description: Product successfully deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteResponse"

    # - Cart responses
    CartCreated:
      description: Cart successfully created
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CartResponse"

    CartFound:
      description: Cart found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CartResponse"

    CartUpdated:
      description: Cart successfully updated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CartResponse"

    CartDeleted:
      description: Cart successfully deleted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteResponse"

    CartProductAdded:
      description: Product successfully added to the cart
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CartResponse"

    CartProductUpdated:
      description: Product quantity successfully updated in the cart
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CartResponse"

    CartProductDeleted:
      description: Product successfully deleted from the cart
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DeleteResponse"